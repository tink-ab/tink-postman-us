{
	"info": {
		"_postman_id": "4fc84752-32f2-419c-a4d0-58c79b11936f",
		"name": "AccountCheck",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32498815"
	},
	"item": [
		{
			"name": "Setting up Continuous Access",
			"item": [
				{
					"name": "1.1 Authorize app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"accessToken\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"description": "Client Id is the unique ID for your app",
									"type": "default"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"description": "Client Secret is the unique secret for you client",
									"type": "default"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "default"
								},
								{
									"key": "scope",
									"value": "user:create,authorization:grant,link-session:write,user:read,credentials:read",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{base}}api/v1/oauth/token",
							"host": [
								"{{base}}api"
							],
							"path": [
								"v1",
								"oauth",
								"token"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2 Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"userId\", jsonData.user_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"external_user_id\": null,\n  \"market\": \"US\", \n  \"locale\": \"en_US\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base}}api/v1/user/create",
							"host": [
								"{{base}}api"
							],
							"path": [
								"v1",
								"user",
								"create"
							]
						},
						"description": "Create User API endpoint call with a way to identify the user and the market."
					},
					"response": []
				}
			]
		},
		{
			"name": "Generate the Reports",
			"item": [
				{
					"name": "2.1 Generate Authorization Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = JSON.parse(responseBody);",
									"",
									"let clientId = pm.environment.get(\"client_id\");",
									"let tinkLinkmarket = pm.environment.get(\"market\")",
									"let tinkLinklocale = pm.environment.get(\"locale\")",
									"let redirectUri = pm.environment.get(\"redirect_uri\");",
									"let tinkLinkURL = pm.environment.get(\"tink_link_url\");",
									"",
									"//Set code in variables",
									"let code = jsonResponse[\"code\"];",
									"pm.environment.set(\"code\", code);",
									"",
									"//Encode redirect URI",
									"let redirectUriEncoded = encodeURIComponent(redirectUri);",
									"",
									"//Compose TinkLink URI",
									"let tinkLink = \"tink_link_url/1.0/account-check/create-report?client_id=YOUR_CLIENT_ID&redirect_uri=REDIRECT_URL&authorization_code=USER_AUTHORIZATION_CODE&market=MARKET&locale=LOCALE\"",
									"tinkLink = tinkLink.replace(\"YOUR_CLIENT_ID\", clientId);",
									"tinkLink = tinkLink.replace(\"USER_AUTHORIZATION_CODE\", code);",
									"tinkLink = tinkLink.replace(\"REDIRECT_URL\", redirectUriEncoded);",
									"tinkLink = tinkLink.replace(\"MARKET\", tinkLinkmarket);",
									"tinkLink = tinkLink.replace(\"LOCALE\", tinkLinklocale);",
									"tinkLink = tinkLink.replace(\"tink_link_url\",tinkLinkURL);",
									"",
									"pm.environment.set(\"tink_link\", tinkLink);",
									"",
									"//Set html template for Postman Visualize",
									"let postmanVisualise = `",
									"<html>",
									"<head>",
									"    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"></script>",
									"    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.11/clipboard.min.js\"></script>",
									"</head>",
									"<body>",
									"    <div>",
									"    <div>",
									"        <pre><code style=\"width:max-content;\" id=\"tinkLink\">${tinkLink}</code></pre>",
									"    </div>",
									"    <button class=\"copyButton\" type=\"button\" data-clipboard-action=\"copy\" data-clipboard-target=\"#tinkLink\" style=\"background:#062A2E;color:white;border-radius:25px\">COPY TINKLINK TO YOUR CLIPBOARD</button>",
									"    </div>",
									"</body>",
									"</html>",
									"<script>",
									"    var clipboard = new ClipboardJS('.copyButton');",
									"",
									"    clipboard.on('success', function(tl) {",
									"        tl.clearSelection()",
									"        tl.trigger.textContent = 'TINKLINK COPIED TO YOUR CLIPBOARD';",
									"        window.setTimeout(function() {",
									"            tl.trigger.textContent = 'COPY TINKLINK TO YOUR CLIPBOARD';",
									"        }, 2500);",
									"    });",
									"",
									"    clipboard.on('error', function(tl) {",
									"        tl.clearSelection()",
									"        tl.trigger.textContent = 'ISSUE WITH COPYING TINKLINK';",
									"        window.setTimeout(function() {",
									"            tl.trigger.textContent = 'COPY TINKLINK TO YOUR CLIPBOARD';",
									"        }, 2500);",
									"    });",
									"</script>`",
									"",
									"//Set the html template to Postamen Visualizer",
									"pm.visualizer.set(postmanVisualise, pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "actor_client_id",
									"value": "df05e4b379934cd09963197cc855bfe9",
									"description": "This value never changes and is used by Tink to identify apps. Once you declare the value, you allow Tink to act on your behalf.",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{userId}}",
									"description": "You can use the user_id or the external_user_id ",
									"type": "text"
								},
								{
									"key": "id_hint",
									"value": "null",
									"description": "The id_hint is a value that has main applicability in the EU, we recommend to set it to null.",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "authorization:read,authorization:grant,credentials:read,providers:read,user:read,credentials:refresh,credentials:write,link-session:read",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}api/v1/oauth/authorization-grant/delegate",
							"host": [
								"{{base}}api"
							],
							"path": [
								"v1",
								"oauth",
								"authorization-grant",
								"delegate"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Get Token to Retrieve Account Verification Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"accessToken\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"description": "Client Id is the unique ID for your app",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"description": "Client Secret is the unique secret for you client",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "account-verification-reports:read,accounts:read",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base}}api/v1/oauth/token",
							"host": [
								"{{base}}api"
							],
							"path": [
								"v1",
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3. Get the Account Check report as JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let body = pm.response.json();",
									"let value = body.userDataByProvider[0].accounts[0].id;",
									"pm.environment.set(\"accountId\", value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base}}api/v1/account-verification-reports/{{reportId}}",
							"host": [
								"{{base}}api"
							],
							"path": [
								"v1",
								"account-verification-reports",
								"{{reportId}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"  pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}
